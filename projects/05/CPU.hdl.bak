// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Mux for alu output and instruction final dest is the A register
    // if A-instr => return instruction
    // if C-instr => return outalu
    Mux16(a=instruction, b=outalu, sel=instruction[15], out=ina);

    // A-Register 
    // if the MSB is 0 it is an A instruction
    // make sure it is a C-instruction when looking for the storage bit

    Not(in=instruction[15], out=notinstruction15);
    Or(a=instruction[5], b=notinstruction15, out=loada);
    ARegister(in=ina, load=loada, out=outa);

    // Set the addressM output (same as the outa)
    Or16(a=outa, b=outa, out[0..14]=addressM);

    // D-Register
    And(a=instruction[15], b=instruction[4], out=loadd);
    DRegister(in=outalu, load=loadd, out=outd);

    // Mux if instruction[12] => out=a else out=inM
    Mux16(a=outa, b=inM, sel=instruction[12], out=outam);

    // ALU
    ALU(x=outd, y=outam, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outalu, zr=zr, ng=ng);
    Or16(a=outalu, b=outalu, out=outM);

    // Set the writeM output
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    // PC

    // Check if we should jump or just inc PC
    And(a=zr, b=instruction[1], out=jz);
    And(a=ng, b=instruction[2], out=jneg);

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    And(a=notzr, b=notng, out=jpostmp);
    And(a=instruction[0], b=jpostmp, out=jpos);

    Or(a=jneg, b=jpos, out=jtmp);
    Or(a=jz, b=jtmp, out=dojmp);

    // we should set the dojmp flag to 0 if there are any dest bits set to 1
    Or(a=instruction[3], b=instruction[4], out=tmp1);
    Or(a=tmp1, b=instruction[5], out=thed);

    Not(in=thed, out=notthed);

    And(a=notthed, b=dojmp, out=jmpflag);

    Not(in=jmpflag, out=doinc);

    PC(in=outa, load=jmpflag, inc=doinc, reset=reset, out[0..14]=pc);

}
